#!/bin/bash

# MateOS Alert System
# Sistema de alertas de MateOS

MATEOS_PATH="${MATEOS_PATH:-$HOME/.local/share/mateOS}"
ALERTS_LOG="$HOME/.local/state/mateOS/logs/alerts.log"
ALERTS_CONFIG="$HOME/.config/mateOS/alerts.conf"

# Crear directorios necesarios
mkdir -p "$(dirname "$ALERTS_LOG")" "$(dirname "$ALERTS_CONFIG")"

# Funci√≥n para logging de alertas
alert_log() {
    local message="$1"
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    echo "[$timestamp] $message" >> "$ALERTS_LOG"
}

# Funci√≥n para enviar notificaci√≥n
send_notification() {
    local title="$1"
    local message="$2"
    local urgency="${3:-normal}"
    
    # Intentar diferentes m√©todos de notificaci√≥n
    if command -v notify-send &>/dev/null; then
        notify-send -u "$urgency" "$title" "$message"
    elif command -v dunstify &>/dev/null; then
        dunstify -u "$urgency" "$title" "$message"
    elif command -v mako &>/dev/null; then
        echo "$title: $message" | mako
    else
        echo "üîî $title: $message"
    fi
    
    alert_log "Notification sent: $title - $message"
}

# Funci√≥n para verificar uso de CPU
check_cpu_usage() {
    local threshold="${1:-80}"
    local cpu_usage=$(top -bn1 | grep "Cpu(s)" | awk '{print $2}' | cut -d'%' -f1)
    
    if (( $(echo "$cpu_usage $threshold" | awk '{print ($1 > $2)}') )); then
        send_notification "‚ö†Ô∏è Alto uso de CPU" "CPU: ${cpu_usage}% (umbral: ${threshold}%)" "critical"
        return 1
    fi
    
    return 0
}

# Funci√≥n para verificar uso de memoria
check_memory_usage() {
    local threshold="${1:-80}"
    local mem_percent=$(free | grep "Mem:" | awk '{printf "%.1f", $3/$2 * 100.0}')
    
    if (( $(echo "$mem_percent $threshold" | awk '{print ($1 > $2)}') )); then
        send_notification "‚ö†Ô∏è Alto uso de memoria" "Memoria: ${mem_percent}% (umbral: ${threshold}%)" "critical"
        return 1
    fi
    
    return 0
}

# Funci√≥n para verificar uso de disco
check_disk_usage() {
    local threshold="${1:-90}"
    local disk_usage=$(df / | tail -1 | awk '{print $5}' | cut -d'%' -f1)
    
    if [ "$disk_usage" -gt "$threshold" ]; then
        send_notification "‚ö†Ô∏è Alto uso de disco" "Disco: ${disk_usage}% (umbral: ${threshold}%)" "critical"
        return 1
    fi
    
    return 0
}

# Funci√≥n para verificar respaldos
check_backups() {
    local max_age_days="${1:-7}"
    local backup_dir="$HOME/.config/mateOS/backups"
    local alert_sent=false
    
    if [ ! -d "$backup_dir" ]; then
        send_notification "‚ùå Sin respaldos" "No hay directorio de respaldos" "critical"
        return 1
    fi
    
    local backup_count=$(find "$backup_dir" -type d -name "mateOS-backup-*" 2>/dev/null | wc -l)
    if [ "$backup_count" -eq 0 ]; then
        send_notification "‚ùå Sin respaldos" "No hay respaldos disponibles" "critical"
        return 1
    fi
    
    # Verificar edad del respaldo m√°s reciente
    local latest_backup=$(find "$backup_dir" -type d -name "mateOS-backup-*" -printf '%T@ %p\n' | sort -n | tail -1 | cut -d' ' -f2)
    if [ -n "$latest_backup" ]; then
        local backup_age=$(find "$latest_backup" -maxdepth 0 -mtime +$max_age_days 2>/dev/null)
        if [ -n "$backup_age" ]; then
            send_notification "‚ö†Ô∏è Respaldo antiguo" "El respaldo m√°s reciente tiene m√°s de $max_age_days d√≠as" "normal"
            alert_sent=true
        fi
    fi
    
    if [ "$alert_sent" = false ]; then
        echo "‚úÖ Respaldos en buen estado"
    fi
    
    return 0
}

# Funci√≥n para verificar logs
check_logs() {
    local max_size_mb="${1:-100}"
    local log_dir="$HOME/.local/state/mateOS/logs"
    local alert_sent=false
    
    if [ ! -d "$log_dir" ]; then
        send_notification "‚ùå Sin logs" "No hay directorio de logs" "normal"
        return 1
    fi
    
    # Verificar tama√±o de logs
    local log_size_mb=$(du -sm "$log_dir" 2>/dev/null | cut -f1)
    if [ "$log_size_mb" -gt "$max_size_mb" ]; then
        send_notification "‚ö†Ô∏è Logs grandes" "Logs: ${log_size_mb}MB (umbral: ${max_size_mb}MB)" "normal"
        alert_sent=true
    fi
    
    # Verificar logs de error
    find "$log_dir" -name "*.log" -exec grep -l "ERROR\|FATAL\|CRITICAL" {} \; 2>/dev/null | while read logfile; do
        local error_count=$(grep -c "ERROR\|FATAL\|CRITICAL" "$logfile" 2>/dev/null || echo "0")
        if [ "$error_count" -gt 0 ]; then
            send_notification "‚ö†Ô∏è Errores en logs" "$(basename "$logfile"): $error_count errores" "normal"
            alert_sent=true
        fi
    done
    
    if [ "$alert_sent" = false ]; then
        echo "‚úÖ Logs en buen estado"
    fi
    
    return 0
}

# Funci√≥n para verificar dependencias
check_dependencies() {
    local critical_deps=("hyprland" "waybar" "kitty" "gum" "jq")
    local missing_deps=()
    
    for dep in "${critical_deps[@]}"; do
        if ! command -v "$dep" &>/dev/null; then
            missing_deps+=("$dep")
        fi
    done
    
    if [ ${#missing_deps[@]} -gt 0 ]; then
        send_notification "‚ùå Dependencias faltantes" "Faltan: ${missing_deps[*]}" "critical"
        return 1
    fi
    
    echo "‚úÖ Todas las dependencias cr√≠ticas est√°n disponibles"
    return 0
}

# Funci√≥n para verificar configuraciones
check_configurations() {
    local missing_configs=()
    
    # Verificar configuraci√≥n principal
    if [ ! -f "$HOME/.config/mateOS/mateos.conf" ]; then
        missing_configs+=("mateos.conf")
    fi
    
    # Verificar variables de entorno
    if [ ! -f "$HOME/.config/mateOS/mateos.env" ]; then
        missing_configs+=("mateos.env")
    fi
    
    # Verificar configuraci√≥n de Hyprland
    if [ ! -d "$HOME/.config/hypr" ]; then
        missing_configs+=("hypr")
    fi
    
    # Verificar configuraci√≥n de Waybar
    if [ ! -d "$HOME/.config/waybar" ]; then
        missing_configs+=("waybar")
    fi
    
    if [ ${#missing_configs[@]} -gt 0 ]; then
        send_notification "‚ö†Ô∏è Configuraciones faltantes" "Faltan: ${missing_configs[*]}" "normal"
        return 1
    fi
    
    echo "‚úÖ Todas las configuraciones est√°n presentes"
    return 0
}

# Funci√≥n para verificar plugins
check_plugins() {
    local plugin_dir="$HOME/.config/mateOS/plugins"
    local broken_plugins=()
    
    if [ -d "$plugin_dir" ]; then
        find "$plugin_dir" -maxdepth 1 -type d -name "*" | while read plugin; do
            local plugin_name=$(basename "$plugin")
            if [ "$plugin_name" != "plugins" ]; then
                # Verificar si el plugin est√° roto
                if [ ! -f "$plugin/plugin.conf" ] && [ ! -f "$plugin/activate.sh" ]; then
                    broken_plugins+=("$plugin_name")
                fi
            fi
        done
        
        if [ ${#broken_plugins[@]} -gt 0 ]; then
            send_notification "‚ö†Ô∏è Plugins rotos" "Plugins rotos: ${broken_plugins[*]}" "normal"
            return 1
        fi
    fi
    
    echo "‚úÖ Plugins en buen estado"
    return 0
}

# Funci√≥n para verificar integridad
check_integrity() {
    if command -v mateos-integrity &>/dev/null; then
        if ! mateos-integrity verify &>/dev/null; then
            send_notification "‚ö†Ô∏è Problemas de integridad" "Se detectaron modificaciones en archivos cr√≠ticos" "critical"
            return 1
        fi
    fi
    
    echo "‚úÖ Integridad verificada"
    return 0
}

# Funci√≥n para verificar procesos
check_processes() {
    local mateos_processes=$(ps aux | grep -c "mateos" || echo "0")
    local hyprland_processes=$(ps aux | grep -c "hyprland" || echo "0")
    local waybar_processes=$(ps aux | grep -c "waybar" || echo "0")
    
    if [ "$hyprland_processes" -eq 0 ]; then
        send_notification "‚ö†Ô∏è Hyprland no ejecut√°ndose" "Hyprland no est√° ejecut√°ndose" "critical"
        return 1
    fi
    
    if [ "$waybar_processes" -eq 0 ]; then
        send_notification "‚ö†Ô∏è Waybar no ejecut√°ndose" "Waybar no est√° ejecut√°ndose" "normal"
        return 1
    fi
    
    echo "‚úÖ Procesos cr√≠ticos ejecut√°ndose"
    return 0
}

# Funci√≥n para verificaci√≥n completa
full_check() {
    echo "üîç Verificaci√≥n completa del sistema MateOS"
    echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
    
    local issues=0
    
    echo "1Ô∏è‚É£ Verificando recursos del sistema..."
    if ! check_cpu_usage 80; then ((issues++)); fi
    if ! check_memory_usage 80; then ((issues++)); fi
    if ! check_disk_usage 90; then ((issues++)); fi
    
    echo ""
    echo "2Ô∏è‚É£ Verificando respaldos..."
    if ! check_backups 7; then ((issues++)); fi
    
    echo ""
    echo "3Ô∏è‚É£ Verificando logs..."
    if ! check_logs 100; then ((issues++)); fi
    
    echo ""
    echo "4Ô∏è‚É£ Verificando dependencias..."
    if ! check_dependencies; then ((issues++)); fi
    
    echo ""
    echo "5Ô∏è‚É£ Verificando configuraciones..."
    if ! check_configurations; then ((issues++)); fi
    
    echo ""
    echo "6Ô∏è‚É£ Verificando plugins..."
    if ! check_plugins; then ((issues++)); fi
    
    echo ""
    echo "7Ô∏è‚É£ Verificando integridad..."
    if ! check_integrity; then ((issues++)); fi
    
    echo ""
    echo "8Ô∏è‚É£ Verificando procesos..."
    if ! check_processes; then ((issues++)); fi
    
    echo ""
    if [ $issues -eq 0 ]; then
        echo "‚úÖ Sistema en buen estado - No se encontraron problemas"
        send_notification "‚úÖ Sistema saludable" "Todas las verificaciones pasaron correctamente" "low"
    else
        echo "‚ö†Ô∏è Se encontraron $issues problemas en el sistema"
        send_notification "‚ö†Ô∏è Problemas detectados" "Se encontraron $issues problemas en el sistema" "normal"
    fi
    
    alert_log "Full check completed: $issues issues found"
    return $issues
}

# Funci√≥n para configurar alertas
configure_alerts() {
    local cpu_threshold="$1"
    local memory_threshold="$2"
    local disk_threshold="$3"
    local backup_age="$4"
    local log_size="$5"
    
    if [ -z "$cpu_threshold" ]; then
        echo "üìã Configuraci√≥n actual de alertas:"
        echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
        
        if [ -f "$ALERTS_CONFIG" ]; then
            cat "$ALERTS_CONFIG"
        else
            echo "No hay configuraci√≥n de alertas"
        fi
        return
    fi
    
    # Crear archivo de configuraci√≥n
    cat > "$ALERTS_CONFIG" << EOF
# MateOS Alerts Configuration
# Configuraci√≥n de alertas de MateOS

[thresholds]
cpu_threshold = ${cpu_threshold:-80}
memory_threshold = ${memory_threshold:-80}
disk_threshold = ${disk_threshold:-90}
backup_age_days = ${backup_age:-7}
log_size_mb = ${log_size:-100}

[notifications]
enabled = true
urgency_critical = critical
urgency_warning = normal
urgency_info = low

[checks]
cpu_check = true
memory_check = true
disk_check = true
backup_check = true
log_check = true
dependency_check = true
config_check = true
plugin_check = true
integrity_check = true
process_check = true

[schedule]
check_interval = 300
auto_check = false
EOF
    
    alert_log "Alerts configured: cpu=$cpu_threshold, memory=$memory_threshold, disk=$disk_threshold"
    
    echo "‚úÖ Configuraci√≥n de alertas actualizada"
}

# Funci√≥n para mostrar historial de alertas
show_alert_history() {
    local lines="${1:-50}"
    
    echo "üìã Historial de alertas (√∫ltimas $lines l√≠neas):"
    echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
    
    if [ -f "$ALERTS_LOG" ]; then
        tail -n "$lines" "$ALERTS_LOG"
    else
        echo "No hay historial de alertas"
    fi
}

# Funci√≥n para limpiar alertas
clear_alerts() {
    echo "üóëÔ∏è Limpiando historial de alertas..."
    
    if [ -f "$ALERTS_LOG" ]; then
        > "$ALERTS_LOG"
        echo "‚úÖ Historial de alertas limpiado"
    else
        echo "‚ÑπÔ∏è  No hay historial de alertas para limpiar"
    fi
}

# Funci√≥n principal
case "$1" in
    "cpu")
        check_cpu_usage "$2"
        ;;
    "memory")
        check_memory_usage "$2"
        ;;
    "disk")
        check_disk_usage "$2"
        ;;
    "backups")
        check_backups "$2"
        ;;
    "logs")
        check_logs "$2"
        ;;
    "deps")
        check_dependencies
        ;;
    "configs")
        check_configurations
        ;;
    "plugins")
        check_plugins
        ;;
    "integrity")
        check_integrity
        ;;
    "processes")
        check_processes
        ;;
    "full"|"all")
        full_check
        ;;
    "configure")
        configure_alerts "$2" "$3" "$4" "$5" "$6"
        ;;
    "history")
        show_alert_history "$2"
        ;;
    "clear")
        clear_alerts
        ;;
    *)
        echo "üîî MateOS Alert System"
        echo ""
        echo "Uso: mateos-alerts <comando> [argumentos]"
        echo ""
        echo "Comandos:"
        echo "  cpu [umbral]              - Verificar uso de CPU"
        echo "  memory [umbral]           - Verificar uso de memoria"
        echo "  disk [umbral]             - Verificar uso de disco"
        echo "  backups [d√≠as]            - Verificar respaldos"
        echo "  logs [tama√±o_mb]          - Verificar logs"
        echo "  deps                      - Verificar dependencias"
        echo "  configs                   - Verificar configuraciones"
        echo "  plugins                   - Verificar plugins"
        echo "  integrity                 - Verificar integridad"
        echo "  processes                 - Verificar procesos"
        echo "  full                      - Verificaci√≥n completa"
        echo "  configure <cpu> <mem> <disk> <backup> <log> - Configurar"
        echo "  history [l√≠neas]         - Mostrar historial"
        echo "  clear                     - Limpiar historial"
        echo ""
        echo "Ejemplos:"
        echo "  mateos-alerts full"
        echo "  mateos-alerts cpu 70"
        echo "  mateos-alerts configure 80 80 90 7 100"
        echo "  mateos-alerts history 100"
        ;;
esac
