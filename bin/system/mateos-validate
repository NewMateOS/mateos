#!/bin/bash

# Cargar variables de entorno centralizadas
MATEOS_PATH="${MATEOS_PATH:-$HOME/.local/share/mateOS}"
if [ -f "$MATEOS_PATH/config/mateos-vars.sh" ]; then
    source "$MATEOS_PATH/config/mateos-vars.sh"
fi


# mateos-validate - Sistema de validaci√≥n mejorado

# =============================================================================
# AYUDA DEL COMANDO
# =============================================================================

# Uso: mateos-validate [comando] [argumentos]
# Descripci√≥n: Sistema de validaci√≥n para comandos de MateOS
# 
# Comandos:
#   all                       - Validar todos los comandos
#   command <nombre> <ruta>   - Validar un comando espec√≠fico
#   config <clave> <valor>    - Configurar opciones de validaci√≥n
# 
# Ejemplos:
#   mateos-validate all
#   mateos-validate command version "/path/to/script"
#   mateos-validate config check_home_defined false

# Directorio base de MateOS
MATEOS_PATH="${MATEOS_PATH:-$HOME/.local/share/mateOS}"

# Archivo de configuraci√≥n de validaci√≥n
VALIDATION_CONFIG="$HOME/.config/mateOS/validation.conf"

# Archivo de log de validaci√≥n
VALIDATION_LOG="$HOME/.local/state/mateOS/logs/validation.log"

# Crear directorios necesarios
mkdir -p "$(dirname "$VALIDATION_CONFIG")" "$(dirname "$VALIDATION_LOG")"

# Colores para la salida
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Funci√≥n para logging de validaci√≥n
log_validation() {
    local message="$1"
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    echo "[$timestamp] $message" >> "$VALIDATION_LOG"
}

# Funci√≥n para obtener una configuraci√≥n de validaci√≥n
get_validation_config() {
    local key="$1"
    grep "^$key=" "$VALIDATION_CONFIG" | cut -d'=' -f2
}

# Funci√≥n para establecer una configuraci√≥n de validaci√≥n
set_validation_config() {
    local key="$1"
    local value="$2"
    if grep -q "^$key=" "$VALIDATION_CONFIG"; then
        sed -i "s/^$key=.*/$key=$value/" "$VALIDATION_CONFIG"
    else
        echo "$key=$value" >> "$VALIDATION_CONFIG"
    fi
}

# Inicializar configuraci√≥n por defecto si no existe
if [ ! -f "$VALIDATION_CONFIG" ]; then
    cat << EOF > "$VALIDATION_CONFIG"
check_existence=true
check_executable=true
check_syntax=true
check_shebang=true
check_help_structure=true
check_mateos_path_defined=true
check_home_defined=true
check_user_defined=true
check_terminal_defined=true
check_editor_defined=true
check_mateos_variables_defined=true
EOF
fi

# Funci√≥n para validar un comando individual
validate_command() {
    local cmd_name="$1"
    local cmd_path="$2"
    local errors=0
    local warnings=0
    local help_structure_score=0 # 0: no help, 1: partial, 2: good

    echo -e "${BLUE}üîç Validando: $cmd_name${NC}"
    log_validation "Validating: $cmd_name ($cmd_path)"

    # 1. Verificar existencia
    if [ "$(get_validation_config check_existence)" = "true" ]; then
        if [ ! -f "$cmd_path" ]; then
            echo -e "${RED}‚ùå Archivo no encontrado: $cmd_path${NC}"
            log_validation "ERROR: File not found: $cmd_path"
            errors=$((errors + 1))
            return 1 # No se puede validar m√°s si el archivo no existe
        fi
    fi

    # 2. Verificar permisos de ejecuci√≥n
    if [ "$(get_validation_config check_executable)" = "true" ]; then
        if [ ! -x "$cmd_path" ]; then
            echo -e "${RED}‚ùå Archivo no ejecutable: $cmd_path${NC}"
            log_validation "ERROR: File not executable: $cmd_path"
            errors=$((errors + 1))
        fi
    fi

    # 3. Verificar sintaxis de bash
    if [ "$(get_validation_config check_syntax)" = "true" ]; then
        if ! bash -n "$cmd_path" 2>/dev/null; then
            echo -e "${RED}‚ùå Error de sintaxis en: $cmd_path${NC}"
            log_validation "ERROR: Syntax error in: $cmd_path"
            errors=$((errors + 1))
            # Mostrar la l√≠nea del error si es posible
            bash -n "$cmd_path" 2>&1 | grep "line" | sed "s/^/    ${RED}/"
        fi
    fi

    # 4. Verificar shebang
    if [ "$(get_validation_config check_shebang)" = "true" ]; then
        if ! head -1 "$cmd_path" | grep -q "^#!/"; then
            echo -e "${RED}‚ùå Shebang faltante en: $cmd_path${NC}"
            log_validation "ERROR: Shebang missing in: $cmd_path"
            errors=$((errors + 1))
        fi
    fi

    # 5. Verificar estructura de ayuda (opcional, como advertencia)
    if [ "$(get_validation_config check_help_structure)" = "true" ]; then
        if grep -q -E "(^# Uso:|^Usage:)" "$cmd_path" && grep -q -E "(^# Comandos:|^Commands:)" "$cmd_path"; then
            help_structure_score=2 # Good
        elif grep -q -E "(^# Uso:|^Usage:)" "$cmd_path" || grep -q -E "(^# Comandos:|^Commands:)" "$cmd_path"; then
            help_structure_score=1 # Partial
        else
            help_structure_score=0 # No help
        fi

        if [ "$help_structure_score" -eq 0 ]; then
            echo -e "${RED}‚ùå Sin estructura de ayuda: $cmd_path${NC}"
            log_validation "ERROR: No help structure: $cmd_path"
            errors=$((errors + 1))
        elif [ "$help_structure_score" -eq 1 ]; then
            echo -e "${YELLOW}‚ö†Ô∏è  Estructura de ayuda parcial: $cmd_path (1/3)${NC}"
            log_validation "WARNING: Partial help structure: $cmd_path"
            warnings=$((warnings + 1))
        fi
    fi

    # 6. Verificar si MATEOS_PATH est√° definido (advertencia si no lo est√° y se usa)
    if [ "$(get_validation_config check_mateos_path_defined)" = "true" ]; then
        if grep -q "\$MATEOS_PATH" "$cmd_path" && ! grep -q "MATEOS_PATH=" "$cmd_path"; then
            echo -e "${YELLOW}‚ö†Ô∏è  MATEOS_PATH no definido en: $cmd_path${NC}"
            log_validation "WARNING: MATEOS_PATH not defined in: $cmd_path"
            warnings=$((warnings + 1))
        fi
    fi

    # 7. Verificar si $HOME est√° definido (advertencia si no lo est√° y se usa)
    if [ "$(get_validation_config check_home_defined)" = "true" ]; then
        if grep -q "\$HOME" "$cmd_path" && ! grep -q "HOME=" "$cmd_path"; then
            echo -e "${YELLOW}‚ö†Ô∏è  Variable \$HOME no definida en: $cmd_path${NC}"
            log_validation "WARNING: \$HOME not defined in: $cmd_path"
            warnings=$((warnings + 1))
        fi
    fi

    # 8. Verificar si $USER est√° definido (advertencia si no lo est√° y se usa)
    if [ "$(get_validation_config check_user_defined)" = "true" ]; then
        if grep -q "\$USER" "$cmd_path" && ! grep -q "USER=" "$cmd_path"; then
            echo -e "${YELLOW}‚ö†Ô∏è  Variable \$USER no definida en: $cmd_path${NC}"
            log_validation "WARNING: \$USER not defined in: $cmd_path"
            warnings=$((warnings + 1))
        fi
    fi

    # 9. Verificar si $TERMINAL est√° definido (advertencia si no lo est√° y se usa)
    if [ "$(get_validation_config check_terminal_defined)" = "true" ]; then
        if grep -q "\$TERMINAL" "$cmd_path" && ! grep -q "TERMINAL=" "$cmd_path"; then
            echo -e "${YELLOW}‚ö†Ô∏è  Variable \$TERMINAL no definida en: $cmd_path${NC}"
            log_validation "WARNING: \$TERMINAL not defined in: $cmd_path"
            warnings=$((warnings + 1))
        fi
    fi

    # 10. Verificar si $EDITOR est√° definido (advertencia si no lo est√° y se usa)
    if [ "$(get_validation_config check_editor_defined)" = "true" ]; then
        if grep -q "\$EDITOR" "$cmd_path" && ! grep -q "EDITOR=" "$cmd_path"; then
            echo -e "${YELLOW}‚ö†Ô∏è  Variable \$EDITOR no definida en: $cmd_path${NC}"
            log_validation "WARNING: \$EDITOR not defined in: $cmd_path"
            warnings=$((warnings + 1))
        fi
    fi

    # 11. Verificar si variables MATEOS_* est√°n definidas (advertencia si no lo est√°n y se usan)
    if [ "$(get_validation_config check_mateos_variables_defined)" = "true" ]; then
        # Excluir MATEOS_PATH ya que se maneja por separado
        local mateos_vars=$(grep -oP '\$MATEOS_[A-Z_]+' "$cmd_path" | sort -u | grep -v '\$MATEOS_PATH')
        for var in $mateos_vars; do
            local var_name=$(echo "$var" | sed 's/\$//')
            if ! grep -q "$var_name=" "$cmd_path"; then
                echo -e "${YELLOW}‚ö†Ô∏è  Variable $var no definida en: $cmd_path${NC}"
                log_validation "WARNING: Variable $var not defined in: $cmd_path"
                warnings=$((warnings + 1))
            fi
        done
    fi

    if [ "$errors" -eq 0 ] && [ "$warnings" -eq 0 ]; then
        echo -e "${GREEN}‚úÖ Comando v√°lido: $cmd_name${NC}"
        log_validation "SUCCESS: Command valid: $cmd_name"
        return 0
    else
        echo -e "${RED}‚ùå $cmd_name: $errors errores encontrados${NC}"
        if [ "$warnings" -gt 0 ]; then
            echo -e "${YELLOW}‚ö†Ô∏è  $cmd_name: $warnings advertencias encontradas${NC}"
        fi
        log_validation "FAILURE: $cmd_name found $errors errors and $warnings warnings."
        return 1
    fi
}

# Funci√≥n para validar todos los comandos
validate_all_commands() {
    echo -e "${BLUE}üîç Validando todos los comandos de MateOS...${NC}"
    log_validation "Starting full validation of all MateOS commands."
    echo ""

    local total_commands=0
    local valid_commands=0
    local commands_with_errors=0

    local categories=("system" "apps" "packages" "themes" "dev" "webapps" "utils")

    for category in "${categories[@]}"; do
        echo -e "${BLUE}=== Validando categor√≠a: $category ===${NC}"
        if [ -d "$MATEOS_PATH/bin/$category" ]; then
            for script in "$MATEOS_PATH/bin/$category"/mateos-*; do
                if [ -f "$script" ]; then
                    local cmd_name=$(basename "$script" | sed 's/mateos-//')
                    total_commands=$((total_commands + 1))
                    if validate_command "$cmd_name" "$script"; then
                        valid_commands=$((valid_commands + 1))
                    else
                        commands_with_errors=$((commands_with_errors + 1))
                    fi
                    echo "" # Espacio entre validaciones
                fi
            done
        fi
    done

    echo -e "${BLUE}üìä Resumen de validaci√≥n:${NC}"
    echo "  Total de comandos: $total_commands"
    echo -e "  ${GREEN}V√°lidos: $valid_commands${NC}"
    echo -e "  ${RED}Con errores: $commands_with_errors${NC}"

    if [ "$commands_with_errors" -gt 0 ]; then
        echo -e "${RED}‚ùå Se encontraron $commands_with_errors comandos con problemas${NC}"
        log_validation "Full validation completed with $commands_with_errors commands having issues."
        return 1
    else
        echo -e "${GREEN}‚úÖ Todos los comandos son v√°lidos.${NC}"
        log_validation "Full validation completed. All commands are valid."
        return 0
    fi
}

# Funci√≥n principal
case "$1" in
    "all")
        validate_all_commands
        ;;
    "command")
        if [ -z "$2" ] || [ -z "$3" ]; then
            echo "Uso: mateos-validate command <nombre_comando> <ruta_comando>"
            exit 1
        fi
        validate_command "$2" "$3"
        ;;
    "config")
        if [ -z "$2" ] || [ -z "$3" ]; then
            echo "Uso: mateos-validate config <clave> <valor>"
            exit 1
        fi
        set_validation_config "$2" "$3"
        echo "‚úÖ Configuraci√≥n de validaci√≥n actualizada: $2 = $3"
        ;;
    *)
        echo "üîß MateOS Validation System"
        echo ""
        echo "Uso: mateos-validate <comando> [argumentos]"
        echo ""
        echo "Comandos:"
        echo "  all                       - Validar todos los comandos"
        echo "  command <nombre> <ruta>   - Validar un comando espec√≠fico"
        echo "  config <clave> <valor>    - Configurar opciones de validaci√≥n"
        echo ""
        echo "Ejemplos:"
        echo "  mateos-validate all"
        echo "  mateos-validate command version \"\$MATEOS_PATH/bin/system/mateos-version\""
        echo "  mateos-validate config check_home_defined false"
        ;;
esac