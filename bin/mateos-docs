#!/bin/bash

# MateOS Documentation System
# Sistema de documentaci√≥n autom√°tica de MateOS

MATEOS_PATH="${MATEOS_PATH:-$HOME/.local/share/mateOS}"
DOCS_DIR="$HOME/.config/mateOS/docs"
DOCS_OUTPUT="$HOME/.config/mateOS/docs/output"
DOCS_CONFIG="$HOME/.config/mateOS/docs.conf"

# Crear directorios necesarios
mkdir -p "$DOCS_DIR" "$DOCS_OUTPUT" "$(dirname "$DOCS_CONFIG")"

# Funci√≥n para generar documentaci√≥n de scripts
generate_script_docs() {
    local script_dir="$1"
    local output_file="$2"
    
    if [ -z "$script_dir" ]; then
        script_dir="$MATEOS_PATH/bin"
    fi
    
    if [ -z "$output_file" ]; then
        output_file="$DOCS_OUTPUT/scripts.md"
    fi
    
    echo "üìù Generando documentaci√≥n de scripts..."
    echo ""
    
    {
        echo "# MateOS Scripts Documentation"
        echo "=============================="
        echo ""
        echo "Generated: $(date)"
        echo "Script Directory: $script_dir"
        echo ""
        
        # Encontrar todos los scripts
        find "$script_dir" -name "*.sh" -o -name "mateos-*" | while read script_file; do
            if [ -f "$script_file" ]; then
                local script_name=$(basename "$script_file")
                echo "## $script_name"
                echo ""
                
                # Extraer comentarios de encabezado
                head -20 "$script_file" | grep "^#" | while read comment; do
                    if [[ $comment =~ ^#\ [A-Z] ]]; then
                        echo "${comment#*# }"
                    fi
                done
                echo ""
                
                # Extraer descripci√≥n del script
                local description=$(grep "^# " "$script_file" | head -1 | sed 's/^# //')
                if [ -n "$description" ]; then
                    echo "**Descripci√≥n:** $description"
                    echo ""
                fi
                
                # Extraer uso del script
                echo "**Uso:**"
                echo '```bash'
                grep -A 20 "case.*in" "$script_file" | grep "echo.*Uso:" | head -1 | sed 's/.*echo "//' | sed 's/".*//'
                echo '```'
                echo ""
                
                # Extraer ejemplos
                echo "**Ejemplos:**"
                echo '```bash'
                grep -A 10 "Ejemplos:" "$script_file" | grep "echo" | sed 's/.*echo "//' | sed 's/".*//' | head -5
                echo '```'
                echo ""
                
                echo "---"
                echo ""
            fi
        done
        
    } > "$output_file"
    
    echo "‚úÖ Documentaci√≥n de scripts generada: $output_file"
}

# Funci√≥n para generar documentaci√≥n de configuraci√≥n
generate_config_docs() {
    local config_file="$1"
    local output_file="$2"
    
    if [ -z "$config_file" ]; then
        config_file="$MATEOS_PATH/config/mateos.conf"
    fi
    
    if [ -z "$output_file" ]; then
        output_file="$DOCS_OUTPUT/configuration.md"
    fi
    
    echo "üìù Generando documentaci√≥n de configuraci√≥n..."
    echo ""
    
    {
        echo "# MateOS Configuration Documentation"
        echo "==================================="
        echo ""
        echo "Generated: $(date)"
        echo "Configuration File: $config_file"
        echo ""
        
        if [ -f "$config_file" ]; then
            # Procesar archivo de configuraci√≥n
            awk '
            BEGIN { in_section = 0; section_name = "" }
            /^\[/ { 
                if (in_section) {
                    print ""
                }
                section_name = substr($0, 2, length($0)-2)
                print "## " section_name
                print ""
                in_section = 1
                next
            }
            /^#/ { 
                gsub(/^# /, "", $0)
                print "**" $0 "**"
                print ""
                next
            }
            /=/ {
                key = $1
                value = substr($0, index($0, "=") + 1)
                gsub(/^[ \t]+|[ \t]+$/, "", key)
                gsub(/^[ \t]+|[ \t]+$/, "", value)
                gsub(/^"|"$/, "", value)
                print "- **" key "**: " value
            }
            ' "$config_file"
        else
            echo "No se encontr√≥ archivo de configuraci√≥n"
        fi
        
    } > "$output_file"
    
    echo "‚úÖ Documentaci√≥n de configuraci√≥n generada: $output_file"
}

# Funci√≥n para generar documentaci√≥n de API
generate_api_docs() {
    local output_file="${1:-$DOCS_OUTPUT/api.md}"
    
    echo "üìù Generando documentaci√≥n de API..."
    echo ""
    
    {
        echo "# MateOS API Documentation"
        echo "========================="
        echo ""
        echo "Generated: $(date)"
        echo ""
        
        echo "## Scripts Disponibles"
        echo ""
        
        # Listar todos los scripts con sus descripciones
        find "$MATEOS_PATH/bin" -name "mateos-*" -type f | sort | while read script_file; do
            if [ -f "$script_file" ] && [ -x "$script_file" ]; then
                local script_name=$(basename "$script_file")
                local description=$(head -5 "$script_file" | grep "^# " | head -1 | sed 's/^# //')
                
                echo "### $script_name"
                if [ -n "$description" ]; then
                    echo "$description"
                fi
                echo ""
                
                # Extraer uso b√°sico
                local usage=$(grep -A 5 "case.*in" "$script_file" | grep "echo.*Uso:" | head -1 | sed 's/.*echo "//' | sed 's/".*//')
                if [ -n "$usage" ]; then
                    echo "**Uso:** \`$usage\`"
                    echo ""
                fi
                
                echo "---"
                echo ""
            fi
        done
        
    } > "$output_file"
    
    echo "‚úÖ Documentaci√≥n de API generada: $output_file"
}

# Funci√≥n para generar documentaci√≥n de temas
generate_themes_docs() {
    local themes_dir="$1"
    local output_file="$2"
    
    if [ -z "$themes_dir" ]; then
        themes_dir="$HOME/.config/mateOS/themes"
    fi
    
    if [ -z "$output_file" ]; then
        output_file="$DOCS_OUTPUT/themes.md"
    fi
    
    echo "üìù Generando documentaci√≥n de temas..."
    echo ""
    
    {
        echo "# MateOS Themes Documentation"
        echo "============================="
        echo ""
        echo "Generated: $(date)"
        echo "Themes Directory: $themes_dir"
        echo ""
        
        if [ -d "$themes_dir" ]; then
            find "$themes_dir" -maxdepth 1 -type d | while read theme_dir; do
                if [ "$theme_dir" != "$themes_dir" ]; then
                    local theme_name=$(basename "$theme_dir")
                    echo "## $theme_name"
                    echo ""
                    
                    # Buscar archivo README en el tema
                    if [ -f "$theme_dir/README.md" ]; then
                        cat "$theme_dir/README.md"
                    else
                        echo "No hay documentaci√≥n disponible para este tema."
                    fi
                    echo ""
                    echo "---"
                    echo ""
                fi
            done
        else
            echo "No hay temas instalados"
        fi
        
    } > "$output_file"
    
    echo "‚úÖ Documentaci√≥n de temas generada: $output_file"
}

# Funci√≥n para generar documentaci√≥n completa
generate_full_docs() {
    local output_dir="${1:-$DOCS_OUTPUT}"
    
    echo "üìù Generando documentaci√≥n completa..."
    echo ""
    
    mkdir -p "$output_dir"
    
    # Generar documentaci√≥n de scripts
    generate_script_docs "$MATEOS_PATH/bin" "$output_dir/scripts.md"
    
    # Generar documentaci√≥n de configuraci√≥n
    generate_config_docs "$MATEOS_PATH/config/mateos.conf" "$output_dir/configuration.md"
    
    # Generar documentaci√≥n de API
    generate_api_docs "$output_dir/api.md"
    
    # Generar documentaci√≥n de temas
    generate_themes_docs "$HOME/.config/mateOS/themes" "$output_dir/themes.md"
    
    # Crear √≠ndice principal
    cat > "$output_dir/README.md" << EOF
# MateOS Documentation
====================

Generated: $(date)

## Documentaci√≥n Disponible

- [Scripts](scripts.md) - Documentaci√≥n de todos los scripts de MateOS
- [Configuraci√≥n](configuration.md) - Documentaci√≥n de configuraci√≥n
- [API](api.md) - Documentaci√≥n de la API
- [Temas](themes.md) - Documentaci√≥n de temas

## Comandos R√°pidos

### Configuraci√≥n
\`\`\`bash
mateos-config validate
mateos-profile list
mateos-deps-install check
\`\`\`

### Respaldos
\`\`\`bash
mateos-backup-auto create
mateos-backup-auto schedule daily 02:00
\`\`\`

### Testing
\`\`\`bash
mateos-test suite all
mateos-ci run test
\`\`\`

### Logging
\`\`\`bash
mateos-log info "Mensaje" system
mateos-audit report
\`\`\`

## Enlaces √ötiles

- [Repositorio](https://github.com/mateOS/mateOS)
- [Issues](https://github.com/mateOS/mateOS/issues)
- [Wiki](https://github.com/mateOS/mateOS/wiki)
EOF
    
    echo "‚úÖ Documentaci√≥n completa generada en: $output_dir"
}

# Funci√≥n para servir documentaci√≥n
serve_docs() {
    local port="${1:-8080}"
    local output_dir="${2:-$DOCS_OUTPUT}"
    
    echo "üåê Sirviendo documentaci√≥n en http://localhost:$port"
    echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
    
    if command -v python3 &>/dev/null; then
        cd "$output_dir"
        python3 -m http.server "$port"
    elif command -v python &>/dev/null; then
        cd "$output_dir"
        python -m SimpleHTTPServer "$port"
    else
        echo "‚ùå Error: Python no est√° disponible para servir documentaci√≥n"
        echo "üí° Instala python3 o python para servir documentaci√≥n"
        return 1
    fi
}

# Funci√≥n para exportar documentaci√≥n
export_docs() {
    local format="$1"
    local output_file="$2"
    
    if [ -z "$format" ]; then
        format="html"
    fi
    
    if [ -z "$output_file" ]; then
        output_file="$DOCS_OUTPUT/mateOS-docs.$format"
    fi
    
    echo "üì§ Exportando documentaci√≥n en formato $format..."
    echo ""
    
    case "$format" in
        "html")
            if command -v pandoc &>/dev/null; then
                pandoc "$DOCS_OUTPUT/README.md" -o "$output_file" --standalone --css=style.css
                echo "‚úÖ Documentaci√≥n HTML exportada: $output_file"
            else
                echo "‚ùå Error: Pandoc no est√° disponible para exportar HTML"
                echo "üí° Instala pandoc: yay -S pandoc"
                return 1
            fi
            ;;
        "pdf")
            if command -v pandoc &>/dev/null; then
                pandoc "$DOCS_OUTPUT/README.md" -o "$output_file" --pdf-engine=wkhtmltopdf
                echo "‚úÖ Documentaci√≥n PDF exportada: $output_file"
            else
                echo "‚ùå Error: Pandoc no est√° disponible para exportar PDF"
                return 1
            fi
            ;;
        "txt")
            cp "$DOCS_OUTPUT/README.md" "$output_file"
            echo "‚úÖ Documentaci√≥n TXT exportada: $output_file"
            ;;
        *)
            echo "‚ùå Error: Formato no soportado: $format"
            echo "Formatos disponibles: html, pdf, txt"
            return 1
            ;;
    esac
}

# Funci√≥n para configurar documentaci√≥n
configure_docs() {
    local auto_generate="$1"
    local output_format="$2"
    local serve_port="$3"
    
    if [ -z "$auto_generate" ]; then
        echo "üìã Configuraci√≥n actual de documentaci√≥n:"
        echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
        
        if [ -f "$DOCS_CONFIG" ]; then
            cat "$DOCS_CONFIG"
        else
            echo "No hay configuraci√≥n de documentaci√≥n"
        fi
        return
    fi
    
    # Crear archivo de configuraci√≥n
    cat > "$DOCS_CONFIG" << EOF
# MateOS Documentation Configuration
# Configuraci√≥n de documentaci√≥n de MateOS

[general]
auto_generate = $auto_generate
output_format = ${output_format:-html}
serve_port = ${serve_port:-8080}

[sections]
scripts = true
configuration = true
api = true
themes = true
examples = true

[output]
directory = $DOCS_OUTPUT
index_file = README.md
style_css = style.css

[export]
formats = html,pdf,txt
default_format = html
EOF
    
    echo "‚úÖ Configuraci√≥n de documentaci√≥n actualizada"
}

# Funci√≥n principal
case "$1" in
    "scripts")
        generate_script_docs "$2" "$3"
        ;;
    "config")
        generate_config_docs "$2" "$3"
        ;;
    "api")
        generate_api_docs "$2"
        ;;
    "themes")
        generate_themes_docs "$2" "$3"
        ;;
    "full"|"all")
        generate_full_docs "$2"
        ;;
    "serve")
        serve_docs "$2" "$3"
        ;;
    "export")
        export_docs "$2" "$3"
        ;;
    "configure")
        configure_docs "$2" "$3" "$4"
        ;;
    *)
        echo "üìö MateOS Documentation System"
        echo ""
        echo "Uso: mateos-docs <comando> [argumentos]"
        echo ""
        echo "Comandos:"
        echo "  scripts [directorio] [archivo]    - Generar documentaci√≥n de scripts"
        echo "  config [archivo] [archivo]       - Generar documentaci√≥n de configuraci√≥n"
        echo "  api [archivo]                     - Generar documentaci√≥n de API"
        echo "  themes [directorio] [archivo]     - Generar documentaci√≥n de temas"
        echo "  full [directorio]                 - Generar documentaci√≥n completa"
        echo "  serve [puerto] [directorio]       - Servir documentaci√≥n"
        echo "  export [formato] [archivo]        - Exportar documentaci√≥n"
        echo "  configure [auto_generate] [formato] [puerto] - Configurar documentaci√≥n"
        echo ""
        echo "Formatos de exportaci√≥n: html, pdf, txt"
        echo ""
        echo "Ejemplos:"
        echo "  mateos-docs full"
        echo "  mateos-docs serve 8080"
        echo "  mateos-docs export html"
        echo "  mateos-docs configure true html 8080"
        ;;
esac
