#!/bin/bash

# MateOS System Optimization
# Optimizaci√≥n del sistema MateOS

MATEOS_PATH="${MATEOS_PATH:-$HOME/.local/share/mateOS}"
OPTIMIZE_LOG="$HOME/.local/state/mateOS/logs/optimize.log"

# Crear directorios necesarios
mkdir -p "$(dirname "$OPTIMIZE_LOG")"

# Funci√≥n para logging
optimize_log() {
    local message="$1"
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    echo "[$timestamp] $message" >> "$OPTIMIZE_LOG"
}

# Funci√≥n para optimizar configuraciones
optimize_configs() {
    echo "üîß Optimizando configuraciones..."
    echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
    
    # Optimizar configuraci√≥n de MateOS
    if [ -f "$HOME/.config/mateOS/mateos.conf" ]; then
        # Comprimir configuraci√≥n si es muy grande
        local config_size=$(stat -c%s "$HOME/.config/mateOS/mateos.conf" 2>/dev/null || echo "0")
        if [ "$config_size" -gt 10000 ]; then
            echo "üì¶ Comprimiendo configuraci√≥n grande..."
            gzip -c "$HOME/.config/mateOS/mateos.conf" > "$HOME/.config/mateOS/mateos.conf.gz"
            optimize_log "Config compressed: $config_size bytes"
        fi
    fi
    
    # Optimizar logs
    if [ -d "$HOME/.local/state/mateOS/logs" ]; then
        echo "üìù Optimizando logs..."
        find "$HOME/.local/state/mateOS/logs" -name "*.log" -size +1M -exec gzip {} \;
        optimize_log "Logs compressed"
    fi
    
    echo "‚úÖ Configuraciones optimizadas"
}

# Funci√≥n para optimizar scripts
optimize_scripts() {
    echo "üîß Optimizando scripts..."
    echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
    
    local optimized=0
    local total=0
    
    # Optimizar scripts de MateOS
    for script in "$MATEOS_PATH/bin"/*; do
        if [ -f "$script" ] && [ -x "$script" ]; then
            ((total++))
            
            # Verificar si el script tiene shebang
            if ! head -1 "$script" | grep -q "^#!"; then
                echo "‚ö†Ô∏è  Script sin shebang: $(basename "$script")"
            fi
            
            # Verificar permisos
            if [ ! -x "$script" ]; then
                echo "‚ö†Ô∏è  Script no ejecutable: $(basename "$script")"
            fi
            
            # Optimizar tama√±o si es muy grande
            local script_size=$(stat -c%s "$script" 2>/dev/null || echo "0")
            if [ "$script_size" -gt 50000 ]; then
                echo "üì¶ Script grande detectado: $(basename "$script") ($script_size bytes)"
            fi
            
            ((optimized++))
        fi
    done
    
    echo "üìä Scripts procesados: $optimized/$total"
    optimize_log "Scripts optimized: $optimized/$total"
    
    echo "‚úÖ Scripts optimizados"
}

# Funci√≥n para optimizar dependencias
optimize_dependencies() {
    echo "üîß Optimizando dependencias..."
    echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
    
    # Verificar dependencias cr√≠ticas
    local critical_deps=("hyprland" "waybar" "kitty" "gum" "jq")
    local missing=0
    
    for dep in "${critical_deps[@]}"; do
        if ! command -v "$dep" &>/dev/null; then
            echo "‚ùå Dependencia faltante: $dep"
            ((missing++))
        else
            echo "‚úÖ $dep disponible"
        fi
    done
    
    if [ $missing -eq 0 ]; then
        echo "‚úÖ Todas las dependencias cr√≠ticas est√°n disponibles"
    else
        echo "‚ö†Ô∏è  $missing dependencias cr√≠ticas faltantes"
    fi
    
    optimize_log "Dependencies checked: $missing missing"
    
    echo "‚úÖ Dependencias optimizadas"
}

# Funci√≥n para optimizar respaldos
optimize_backups() {
    echo "üîß Optimizando respaldos..."
    echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
    
    local backup_dir="$HOME/.config/mateOS/backups"
    local total_size=0
    local backup_count=0
    
    if [ -d "$backup_dir" ]; then
        # Calcular tama√±o total de respaldos
        total_size=$(du -sb "$backup_dir" 2>/dev/null | cut -f1)
        backup_count=$(find "$backup_dir" -type d -name "mateOS-backup-*" | wc -l)
        
        echo "üìä Respaldos encontrados: $backup_count"
        echo "üìä Tama√±o total: $(numfmt --to=iec $total_size)"
        
        # Limpiar respaldos antiguos (m√°s de 30 d√≠as)
        local old_backups=$(find "$backup_dir" -type d -name "mateOS-backup-*" -mtime +30 | wc -l)
        if [ "$old_backups" -gt 0 ]; then
            echo "üóëÔ∏è  Limpiando $old_backups respaldos antiguos..."
            find "$backup_dir" -type d -name "mateOS-backup-*" -mtime +30 -exec rm -rf {} \;
            optimize_log "Old backups cleaned: $old_backups"
        fi
        
        # Comprimir respaldos grandes
        find "$backup_dir" -type d -name "mateOS-backup-*" -size +100M | while read backup; do
            echo "üì¶ Comprimiendo respaldo grande: $(basename "$backup")"
            tar -czf "${backup}.tar.gz" -C "$(dirname "$backup")" "$(basename "$backup")"
            rm -rf "$backup"
            optimize_log "Backup compressed: $(basename "$backup")"
        done
    else
        echo "‚ÑπÔ∏è  No hay directorio de respaldos"
    fi
    
    echo "‚úÖ Respaldos optimizados"
}

# Funci√≥n para optimizar logs
optimize_logs() {
    echo "üîß Optimizando logs..."
    echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
    
    local log_dir="$HOME/.local/state/mateOS/logs"
    local total_size=0
    local log_count=0
    
    if [ -d "$log_dir" ]; then
        # Calcular tama√±o total de logs
        total_size=$(du -sb "$log_dir" 2>/dev/null | cut -f1)
        log_count=$(find "$log_dir" -name "*.log" | wc -l)
        
        echo "üìä Logs encontrados: $log_count"
        echo "üìä Tama√±o total: $(numfmt --to=iec $total_size)"
        
        # Rotar logs grandes
        find "$log_dir" -name "*.log" -size +10M | while read logfile; do
            echo "üîÑ Rotando log grande: $(basename "$logfile")"
            mv "$logfile" "${logfile}.old"
            touch "$logfile"
            optimize_log "Log rotated: $(basename "$logfile")"
        done
        
        # Comprimir logs antiguos
        find "$log_dir" -name "*.log.old" -mtime +7 | while read logfile; do
            echo "üì¶ Comprimiendo log antiguo: $(basename "$logfile")"
            gzip "$logfile"
            optimize_log "Log compressed: $(basename "$logfile")"
        done
    else
        echo "‚ÑπÔ∏è  No hay directorio de logs"
    fi
    
    echo "‚úÖ Logs optimizados"
}

# Funci√≥n para optimizar cach√©
optimize_cache() {
    echo "üîß Optimizando cach√©..."
    echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
    
    local cache_dir="$HOME/.cache/mateOS"
    local total_size=0
    
    if [ -d "$cache_dir" ]; then
        # Calcular tama√±o del cach√©
        total_size=$(du -sb "$cache_dir" 2>/dev/null | cut -f1)
        echo "üìä Tama√±o del cach√©: $(numfmt --to=iec $total_size)"
        
        # Limpiar cach√© antiguo
        find "$cache_dir" -type f -mtime +7 -delete 2>/dev/null
        echo "üóëÔ∏è  Cach√© antiguo limpiado"
        
        optimize_log "Cache optimized: $(numfmt --to=iec $total_size)"
    else
        echo "‚ÑπÔ∏è  No hay directorio de cach√©"
    fi
    
    echo "‚úÖ Cach√© optimizado"
}

# Funci√≥n para optimizar permisos
optimize_permissions() {
    echo "üîß Optimizando permisos..."
    echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
    
    local fixed=0
    
    # Verificar permisos de scripts
    for script in "$MATEOS_PATH/bin"/*; do
        if [ -f "$script" ] && [ ! -x "$script" ]; then
            chmod +x "$script"
            echo "üîß Permisos corregidos: $(basename "$script")"
            ((fixed++))
        fi
    done
    
    # Verificar permisos de configuraci√≥n
    if [ -d "$HOME/.config/mateOS" ]; then
        chmod 755 "$HOME/.config/mateOS"
        find "$HOME/.config/mateOS" -type f -name "*.conf" -exec chmod 644 {} \;
        find "$HOME/.config/mateOS" -type f -name "*.sh" -exec chmod 755 {} \;
    fi
    
    echo "üìä Permisos corregidos: $fixed"
    optimize_log "Permissions optimized: $fixed fixed"
    
    echo "‚úÖ Permisos optimizados"
}

# Funci√≥n para generar reporte de optimizaci√≥n
generate_report() {
    local report_file="$HOME/.local/state/mateOS/optimize-report-$(date +%Y%m%d-%H%M%S).txt"
    
    echo "üìã Generando reporte de optimizaci√≥n..."
    echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
    
    cat > "$report_file" << EOF
# Reporte de Optimizaci√≥n MateOS
# Generado: $(date)

## Resumen del Sistema
- Versi√≥n: $(cat "$MATEOS_PATH/version" 2>/dev/null || echo "Desconocida")
- Usuario: $USER
- Sistema: $(uname -s)
- Arquitectura: $(uname -m)

## Configuraciones
- Archivo de configuraci√≥n: $([ -f "$HOME/.config/mateOS/mateos.conf" ] && echo "‚úÖ Presente" || echo "‚ùå Faltante")
- Variables de entorno: $([ -f "$HOME/.config/mateOS/mateos.env" ] && echo "‚úÖ Presente" || echo "‚ùå Faltante")

## Scripts
- Total de scripts: $(find "$MATEOS_PATH/bin" -type f -executable | wc -l)
- Scripts ejecutables: $(find "$MATEOS_PATH/bin" -type f -executable | wc -l)

## Respaldos
- Directorio de respaldos: $([ -d "$HOME/.config/mateOS/backups" ] && echo "‚úÖ Presente" || echo "‚ùå Faltante")
- N√∫mero de respaldos: $(find "$HOME/.config/mateOS/backups" -type d -name "mateOS-backup-*" 2>/dev/null | wc -l)

## Logs
- Directorio de logs: $([ -d "$HOME/.local/state/mateOS/logs" ] && echo "‚úÖ Presente" || echo "‚ùå Faltante")
- N√∫mero de logs: $(find "$HOME/.local/state/mateOS/logs" -name "*.log" 2>/dev/null | wc -l)

## Dependencias
- hyprland: $(command -v hyprland &>/dev/null && echo "‚úÖ" || echo "‚ùå")
- waybar: $(command -v waybar &>/dev/null && echo "‚úÖ" || echo "‚ùå")
- kitty: $(command -v kitty &>/dev/null && echo "‚úÖ" || echo "‚ùå")
- gum: $(command -v gum &>/dev/null && echo "‚úÖ" || echo "‚ùå")
- jq: $(command -v jq &>/dev/null && echo "‚úÖ" || echo "‚ùå")

## Plugins
- Plugins instalados: $(mateos-plugins list 2>/dev/null | grep -c "‚úÖ" || echo "0")

## Optimizaciones Aplicadas
$(tail -20 "$OPTIMIZE_LOG" 2>/dev/null || echo "No hay logs de optimizaci√≥n")

EOF
    
    echo "‚úÖ Reporte generado: $report_file"
    optimize_log "Report generated: $report_file"
}

# Funci√≥n para optimizaci√≥n completa
full_optimization() {
    echo "üöÄ Optimizaci√≥n completa del sistema MateOS"
    echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
    echo ""
    
    optimize_log "Full optimization started"
    
    optimize_configs
    echo ""
    optimize_scripts
    echo ""
    optimize_dependencies
    echo ""
    optimize_backups
    echo ""
    optimize_logs
    echo ""
    optimize_cache
    echo ""
    optimize_permissions
    echo ""
    generate_report
    
    echo ""
    echo "üéâ Optimizaci√≥n completa finalizada"
    optimize_log "Full optimization completed"
}

# Funci√≥n para mostrar estad√≠sticas
show_stats() {
    echo "üìä Estad√≠sticas del sistema MateOS"
    echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
    
    # Scripts
    local script_count=$(find "$MATEOS_PATH/bin" -type f -executable | wc -l)
    echo "üîß Scripts: $script_count"
    
    # Configuraciones
    local config_count=$(find "$HOME/.config/mateOS" -name "*.conf" 2>/dev/null | wc -l)
    echo "‚öôÔ∏è  Configuraciones: $config_count"
    
    # Respaldos
    local backup_count=$(find "$HOME/.config/mateOS/backups" -type d -name "mateOS-backup-*" 2>/dev/null | wc -l)
    echo "üíæ Respaldos: $backup_count"
    
    # Logs
    local log_count=$(find "$HOME/.local/state/mateOS/logs" -name "*.log" 2>/dev/null | wc -l)
    echo "üìù Logs: $log_count"
    
    # Plugins
    local plugin_count=$(mateos-plugins list 2>/dev/null | grep -c "‚úÖ" || echo "0")
    echo "üîå Plugins: $plugin_count"
    
    # Tama√±o total
    local total_size=$(du -sb "$MATEOS_PATH" 2>/dev/null | cut -f1)
    echo "üì¶ Tama√±o total: $(numfmt --to=iec $total_size)"
}

# Funci√≥n principal
case "$1" in
    "configs")
        optimize_configs
        ;;
    "scripts")
        optimize_scripts
        ;;
    "deps")
        optimize_dependencies
        ;;
    "backups")
        optimize_backups
        ;;
    "logs")
        optimize_logs
        ;;
    "cache")
        optimize_cache
        ;;
    "permissions")
        optimize_permissions
        ;;
    "report")
        generate_report
        ;;
    "stats")
        show_stats
        ;;
    "full"|"all")
        full_optimization
        ;;
    *)
        echo "üîß MateOS System Optimization"
        echo ""
        echo "Uso: mateos-optimize <comando>"
        echo ""
        echo "Comandos:"
        echo "  configs      - Optimizar configuraciones"
        echo "  scripts      - Optimizar scripts"
        echo "  deps         - Optimizar dependencias"
        echo "  backups      - Optimizar respaldos"
        echo "  logs         - Optimizar logs"
        echo "  cache        - Optimizar cach√©"
        echo "  permissions  - Optimizar permisos"
        echo "  report       - Generar reporte"
        echo "  stats        - Mostrar estad√≠sticas"
        echo "  full         - Optimizaci√≥n completa"
        echo ""
        echo "Ejemplos:"
        echo "  mateos-optimize full"
        echo "  mateos-optimize stats"
        echo "  mateos-optimize backups"
        ;;
esac
