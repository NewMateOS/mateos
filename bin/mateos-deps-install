#!/bin/bash

# MateOS Dependencies Installer
# Instalador automático de dependencias de MateOS

MATEOS_PATH="${MATEOS_PATH:-$HOME/.local/share/mateOS}"

# Colores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Función para imprimir mensajes con color
print_status() {
    local color="$1"
    local message="$2"
    echo -e "${color}${message}${NC}"
}

# Función para verificar si un comando existe
command_exists() {
    command -v "$1" &>/dev/null
}

# Función para verificar si un paquete está instalado
package_installed() {
    pacman -Q "$1" &>/dev/null
}

# Función para instalar paquete con yay
install_with_yay() {
    local package="$1"
    local description="$2"
    
    print_status "$BLUE" "📦 Instalando $description ($package)..."
    
    if yay -S --noconfirm "$package" &>/dev/null; then
        print_status "$GREEN" "✅ $description instalado correctamente"
        return 0
    else
        print_status "$RED" "❌ Error instalando $description"
        return 1
    fi
}

# Función para instalar paquete con pacman
install_with_pacman() {
    local package="$1"
    local description="$2"
    
    print_status "$BLUE" "📦 Instalando $description ($package)..."
    
    if sudo pacman -S --noconfirm "$package" &>/dev/null; then
        print_status "$GREEN" "✅ $description instalado correctamente"
        return 0
    else
        print_status "$RED" "❌ Error instalando $description"
        return 1
    fi
}

# Función para instalar dependencias críticas
install_critical_deps() {
    print_status "$YELLOW" "🔧 Instalando dependencias críticas..."
    echo ""
    
    local critical_packages=(
        "hyprland"
        "waybar"
        "kitty"
        "gum"
        "jq"
    )
    
    local critical_commands=(
        "uwsm-app"
    )
    
    local installed=0
    local failed=0
    
    # Verificar paquetes
    for package in "${critical_packages[@]}"; do
        if ! package_installed "$package"; then
            if install_with_pacman "$package" "$package"; then
                ((installed++))
            else
                ((failed++))
            fi
        else
            print_status "$GREEN" "✅ $package ya está instalado"
        fi
    done
    
    # Verificar comandos del sistema
    for command in "${critical_commands[@]}"; do
        if command_exists "$command"; then
            print_status "$GREEN" "✅ $command ya está disponible"
        else
            print_status "$RED" "❌ $command no está disponible en el sistema"
            ((failed++))
        fi
    done
    
    echo ""
    print_status "$BLUE" "📊 Resumen de dependencias críticas:"
    print_status "$GREEN" "  ✅ Instalados: $installed"
    if [ $failed -gt 0 ]; then
        print_status "$RED" "  ❌ Fallidos: $failed"
    fi
}

# Función para instalar dependencias opcionales
install_optional_deps() {
    print_status "$YELLOW" "🔧 Instalando dependencias opcionales..."
    echo ""
    
    local optional_packages=(
        "btop"
        "fastfetch"
        "starship"
        "swayosd"
        "walker"
        "hypridle"
        "hyprlock"
        "hyprsunset"
        "mako"
        "blueberry"
        "nautilus"
        "chromium"
        "firefox"
        "nvim"
        "git"
        "docker"
        "docker-compose"
        "tailscale"
        "steam"
        "discord"
        "spotify"
        "obsidian"
        "1password"
        "signal-desktop"
    )
    
    local installed=0
    local skipped=0
    
    for package in "${optional_packages[@]}"; do
        if ! package_installed "$package"; then
            if install_with_yay "$package" "$package"; then
                ((installed++))
            else
                print_status "$YELLOW" "⚠️  Saltando $package (no disponible)"
                ((skipped++))
            fi
        else
            print_status "$GREEN" "✅ $package ya está instalado"
        fi
    done
    
    echo ""
    print_status "$BLUE" "📊 Resumen de dependencias opcionales:"
    print_status "$GREEN" "  ✅ Instalados: $installed"
    print_status "$YELLOW" "  ⚠️  Saltados: $skipped"
}

# Función para instalar dependencias de desarrollo
install_dev_deps() {
    print_status "$YELLOW" "💻 Instalando dependencias de desarrollo..."
    echo ""
    
    local dev_packages=(
        "base-devel"
        "git"
        "docker"
        "docker-compose"
        "nodejs"
        "npm"
        "python"
        "python-pip"
        "rust"
        "go"
        "jdk-openjdk"
        "maven"
        "gradle"
        "vscode"
        "intellij-idea-community-edition"
    )
    
    local installed=0
    local failed=0
    
    for package in "${dev_packages[@]}"; do
        if ! package_installed "$package"; then
            if install_with_yay "$package" "$package"; then
                ((installed++))
            else
                print_status "$YELLOW" "⚠️  Saltando $package (no disponible)"
                ((failed++))
            fi
        else
            print_status "$GREEN" "✅ $package ya está instalado"
        fi
    done
    
    echo ""
    print_status "$BLUE" "📊 Resumen de dependencias de desarrollo:"
    print_status "$GREEN" "  ✅ Instalados: $installed"
    if [ $failed -gt 0 ]; then
        print_status "$YELLOW" "  ⚠️  Saltados: $failed"
    fi
}

# Función para instalar dependencias de gaming
install_gaming_deps() {
    print_status "$YELLOW" "🎮 Instalando dependencias de gaming..."
    echo ""
    
    local gaming_packages=(
        "steam"
        "discord"
        "lutris"
        "wine"
        "winetricks"
        "proton-ge-custom"
        "gamemode"
        "mangohud"
        "vulkan-radeon"
        "vulkan-intel"
        "nvidia"
        "nvidia-utils"
        "nvidia-settings"
    )
    
    local installed=0
    local failed=0
    
    for package in "${gaming_packages[@]}"; do
        if ! package_installed "$package"; then
            if install_with_yay "$package" "$package"; then
                ((installed++))
            else
                print_status "$YELLOW" "⚠️  Saltando $package (no disponible)"
                ((failed++))
            fi
        else
            print_status "$GREEN" "✅ $package ya está instalado"
        fi
    done
    
    echo ""
    print_status "$BLUE" "📊 Resumen de dependencias de gaming:"
    print_status "$GREEN" "  ✅ Instalados: $installed"
    if [ $failed -gt 0 ]; then
        print_status "$YELLOW" "  ⚠️  Saltados: $failed"
    fi
}

# Función para verificar dependencias
check_dependencies() {
    print_status "$BLUE" "🔍 Verificando dependencias de MateOS..."
    echo ""
    
    local critical_packages=(
        "hyprland"
        "waybar"
        "kitty"
        "gum"
        "jq"
    )
    
    local critical_commands=(
        "uwsm-app"
    )
    
    # Aplicaciones adicionales importantes
    local additional_packages=(
        "swayosd"
        "walker"
        "hypridle"
        "hyprlock"
        "hyprsunset"
        "mako"
        "btop"
        "fastfetch"
        "starship"
        "blueberry"
        "nautilus"
        "chromium"
        "nvim"
        "git"
        "docker"
        "docker-compose"
        "tailscale"
        "steam"
        "spotify"
        "obsidian"
        "signal-desktop"
        "elephant"
        "mangohud"
        "base-devel"
        "nodejs"
        "npm"
        "python"
        "python-pip"
        "rust"
        "go"
        "jdk-openjdk"
        "maven"
        "gradle"
        "vscode"
    )
    
    # Aplicaciones opcionales (no se muestran como faltantes)
    local optional_packages=(
        "firefox"
        "discord"
        "1password"
        "lutris"
        "wine"
        "winetricks"
        "proton-ge-custom"
        "gamemode"
        "intellij-idea-community-edition"
    )
    
    # Detectar drivers de hardware necesarios
    local hardware_packages=()
    
    # Detectar GPU NVIDIA
    if lspci | grep -i nvidia &>/dev/null; then
        hardware_packages+=("nvidia" "nvidia-utils" "nvidia-settings")
    fi
    
    # Detectar GPU AMD
    if lspci | grep -i amd &>/dev/null || lspci | grep -i radeon &>/dev/null; then
        hardware_packages+=("vulkan-radeon")
    fi
    
    # Detectar GPU Intel
    if lspci | grep -i intel &>/dev/null; then
        hardware_packages+=("vulkan-intel")
    fi
    
    local missing=0
    local present=0
    
    print_status "$YELLOW" "🔧 Dependencias críticas:"
    # Verificar paquetes críticos
    for package in "${critical_packages[@]}"; do
        if package_installed "$package"; then
            print_status "$GREEN" "✅ $package"
            ((present++))
        else
            print_status "$RED" "❌ $package (faltante)"
            ((missing++))
        fi
    done
    
    # Verificar comandos del sistema
    for command in "${critical_commands[@]}"; do
        if command_exists "$command"; then
            print_status "$GREEN" "✅ $command"
            ((present++))
        else
            print_status "$RED" "❌ $command (faltante)"
            ((missing++))
        fi
    done
    
    echo ""
    print_status "$YELLOW" "⭐ Aplicaciones adicionales:"
    # Verificar aplicaciones adicionales
    for package in "${additional_packages[@]}"; do
        if package_installed "$package"; then
            print_status "$GREEN" "✅ $package"
            ((present++))
        else
            print_status "$RED" "❌ $package (faltante)"
            ((missing++))
        fi
    done
    
    # Verificar drivers de hardware si se detectaron
    if [ ${#hardware_packages[@]} -gt 0 ]; then
        echo ""
        print_status "$YELLOW" "🖥️  Drivers de hardware detectados:"
        for package in "${hardware_packages[@]}"; do
            if package_installed "$package"; then
                print_status "$GREEN" "✅ $package"
                ((present++))
            else
                print_status "$RED" "❌ $package (faltante)"
                ((missing++))
            fi
        done
    fi
    
    # Mostrar aplicaciones opcionales (solo si están instaladas)
    local optional_installed=0
    echo ""
    print_status "$YELLOW" "🔧 Aplicaciones opcionales instaladas:"
    for package in "${optional_packages[@]}"; do
        if package_installed "$package"; then
            print_status "$GREEN" "✅ $package"
            ((optional_installed++))
        fi
    done
    
    if [ $optional_installed -eq 0 ]; then
        print_status "$BLUE" "ℹ️  No hay aplicaciones opcionales instaladas"
    fi
    
    echo ""
    print_status "$BLUE" "📊 Resumen:"
    print_status "$GREEN" "  ✅ Presentes: $present"
    if [ $missing -gt 0 ]; then
        print_status "$RED" "  ❌ Faltantes: $missing"
        print_status "$YELLOW" "💡 Ejecuta: mateos-deps-install critical"
        print_status "$YELLOW" "💡 Para todas las aplicaciones: mateos-deps-install full"
    fi
}

# Función para limpiar dependencias no utilizadas
cleanup_deps() {
    print_status "$YELLOW" "🧹 Limpiando dependencias no utilizadas..."
    echo ""
    
    # Limpiar cache de yay
    if command_exists yay; then
        print_status "$BLUE" "🧹 Limpiando cache de yay..."
        yay -Sc --noconfirm
    fi
    
    # Limpiar cache de pacman
    print_status "$BLUE" "🧹 Limpiando cache de pacman..."
    sudo pacman -Sc --noconfirm
    
    # Limpiar paquetes huérfanos
    print_status "$BLUE" "🧹 Limpiando paquetes huérfanos..."
    sudo pacman -Rns $(pacman -Qtdq) --noconfirm 2>/dev/null || true
    
    print_status "$GREEN" "✅ Limpieza completada"
}

# Función principal
case "$1" in
    "critical"|"core")
        install_critical_deps
        ;;
    "optional"|"all")
        install_optional_deps
        ;;
    "development"|"dev")
        install_dev_deps
        ;;
    "gaming"|"games")
        install_gaming_deps
        ;;
    "check"|"verify")
        check_dependencies
        ;;
    "cleanup"|"clean")
        cleanup_deps
        ;;
    "full"|"complete")
        install_critical_deps
        echo ""
        install_optional_deps
        echo ""
        install_dev_deps
        echo ""
        install_gaming_deps
        ;;
    *)
        echo "📦 MateOS Dependencies Installer"
        echo ""
        echo "Uso: mateos-deps-install <comando>"
        echo ""
        echo "Comandos:"
        echo "  critical, core        - Instalar dependencias críticas"
        echo "  optional, all        - Instalar dependencias opcionales"
        echo "  development, dev     - Instalar dependencias de desarrollo"
        echo "  gaming, games        - Instalar dependencias de gaming"
        echo "  check, verify        - Verificar dependencias instaladas"
        echo "  cleanup, clean       - Limpiar dependencias no utilizadas"
        echo "  full, complete       - Instalar todas las dependencias"
        echo ""
        echo "Ejemplos:"
        echo "  mateos-deps-install critical"
        echo "  mateos-deps-install development"
        echo "  mateos-deps-install check"
        echo "  mateos-deps-install full"
        ;;
esac
