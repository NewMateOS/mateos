#!/bin/bash

# MateOS Configuration Manager
# Gestor de configuración central de MateOS

MATEOS_PATH="${MATEOS_PATH:-$HOME/.local/share/mateOS}"
CONFIG_FILE="$MATEOS_PATH/config/mateos.conf"

# Función para leer configuración
get_config() {
    local section="$1"
    local key="$2"
    
    if [ -f "$CONFIG_FILE" ]; then
        # Buscar la sección y luego la clave
        awk -F'=' -v section="$section" -v key="$key" '
        BEGIN { in_section = 0 }
        /^\[/ { 
            if ($0 == "[" section "]") { in_section = 1; next }
            else { in_section = 0; next }
        }
        in_section && gsub(/^[ \t]+|[ \t]+$/, "", $1) && $1 == key { 
            gsub(/^[ \t]+|[ \t]+$/, "", $2)
            gsub(/^"|"$/, "", $2)
            print $2
            exit
        }
        ' "$CONFIG_FILE"
    fi
}

# Función para escribir configuración
set_config() {
    local section="$1"
    local key="$2"
    local value="$3"
    
    if [ ! -f "$CONFIG_FILE" ]; then
        echo "Error: Archivo de configuración no encontrado: $CONFIG_FILE"
        exit 1
    fi
    
    # Crear backup
    cp "$CONFIG_FILE" "$CONFIG_FILE.bak.$(date +%s)"
    
    # Actualizar configuración
    awk -F'=' -v section="$section" -v key="$key" -v value="$value" '
    BEGIN { in_section = 0; updated = 0 }
    /^\[/ { 
        if ($0 == "[" section "]") { in_section = 1; print; next }
        else { in_section = 0; print; next }
    }
    in_section && $1 == key { 
        print key " = \"" value "\""
        updated = 1
        next
    }
    { print }
    END {
        if (!updated && in_section) {
            print key " = \"" value "\""
        }
    }
    ' "$CONFIG_FILE" > "$CONFIG_FILE.tmp" && mv "$CONFIG_FILE.tmp" "$CONFIG_FILE"
}

# Función para mostrar configuración
show_config() {
    local section="$1"
    
    if [ -n "$section" ]; then
        echo "🔧 Configuración de MateOS - Sección: $section"
        echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
        awk -v section="$section" '
        BEGIN { in_section = 0 }
        /^\[/ { 
            if ($0 == "[" section "]") { in_section = 1; next }
            else { in_section = 0; next }
        }
        in_section && /^[^#]/ && /=/ { 
            gsub(/^[ \t]+|[ \t]+$/, "", $0)
            print "  " $0
        }
        ' "$CONFIG_FILE"
    else
        echo "🔧 Configuración de MateOS"
        echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
        cat "$CONFIG_FILE" | grep -E '^\[|^[a-zA-Z]' | while read line; do
            if [[ $line =~ ^\[.*\]$ ]]; then
                echo ""
                echo "📁 ${line//[\[\]]/}"
                echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
            else
                echo "  $line"
            fi
        done
    fi
}

# Función para validar configuración
validate_config() {
    echo "🔍 Validando configuración de MateOS..."
    echo ""
    
    local errors=0
    
    # Verificar archivo de configuración
    if [ ! -f "$CONFIG_FILE" ]; then
        echo "❌ Archivo de configuración no encontrado: $CONFIG_FILE"
        ((errors++))
    else
        echo "✅ Archivo de configuración encontrado"
    fi
    
    # Verificar secciones requeridas
    local required_sections=("system" "paths" "applications" "hyprland" "waybar")
    for section in "${required_sections[@]}"; do
        if grep -q "^\[$section\]" "$CONFIG_FILE"; then
            echo "✅ Sección [$section] presente"
        else
            echo "❌ Sección [$section] faltante"
            ((errors++))
        fi
    done
    
    # Verificar rutas
    local mateos_path=$(get_config "paths" "mateos_path")
    if [ -z "$mateos_path" ]; then
        echo "❌ Ruta de MateOS no configurada"
        ((errors++))
    elif [ -d "${mateos_path//\$HOME/$HOME}" ]; then
        echo "✅ Ruta de MateOS válida: $mateos_path"
    else
        echo "❌ Ruta de MateOS inválida: $mateos_path"
        ((errors++))
    fi
    
    if [ $errors -eq 0 ]; then
        echo ""
        echo "✅ Configuración válida"
    else
        echo ""
        echo "❌ Se encontraron $errors errores en la configuración"
    fi
    
    return $errors
}

# Función para resetear configuración
reset_config() {
    echo "🔄 Reseteando configuración a valores por defecto..."
    
    if [ -f "$CONFIG_FILE" ]; then
        cp "$CONFIG_FILE" "$CONFIG_FILE.backup.$(date +%s)"
        echo "📦 Backup creado"
    fi
    
    # Restaurar desde template
    if [ -f "$MATEOS_PATH/config/mateos.conf" ]; then
        cp "$MATEOS_PATH/config/mateos.conf" "$CONFIG_FILE"
        echo "✅ Configuración reseteada"
    else
        echo "❌ No se pudo encontrar template de configuración"
        exit 1
    fi
}

# Función para aplicar configuración
apply_config() {
    echo "🔧 Aplicando configuración de MateOS..."
    echo ""
    
    # Aplicar variables de entorno
    local mateos_path=$(get_config "paths" "mateos_path")
    local config_path=$(get_config "paths" "config_path")
    local state_path=$(get_config "paths" "state_path")
    
    # Expandir variables
    mateos_path="${mateos_path//\$HOME/$HOME}"
    config_path="${config_path//\$HOME/$HOME}"
    state_path="${state_path//\$HOME/$HOME}"
    
    # Crear directorios necesarios
    mkdir -p "$config_path" "$state_path" "$state_path/logs"
    echo "✅ Directorios creados"
    
    # Aplicar configuración de Hyprland
    local gaps_in=$(get_config "hyprland" "gaps_in")
    local gaps_out=$(get_config "hyprland" "gaps_out")
    local rounding=$(get_config "hyprland" "rounding")
    
    if [ -n "$gaps_in" ] && [ -n "$gaps_out" ]; then
        echo "✅ Configuración de Hyprland aplicada"
    fi
    
    # Aplicar configuración de Waybar
    local waybar_height=$(get_config "waybar" "height")
    local waybar_position=$(get_config "waybar" "position")
    
    if [ -n "$waybar_height" ]; then
        echo "✅ Configuración de Waybar aplicada"
    fi
    
    echo ""
    echo "✅ Configuración aplicada exitosamente"
}

# Función principal
case "$1" in
    "get")
        if [ -z "$2" ] || [ -z "$3" ]; then
            echo "Uso: mateos-config get <sección> <clave>"
            exit 1
        fi
        get_config "$2" "$3"
        ;;
    "set")
        if [ -z "$2" ] || [ -z "$3" ] || [ -z "$4" ]; then
            echo "Uso: mateos-config set <sección> <clave> <valor>"
            exit 1
        fi
        set_config "$2" "$3" "$4"
        echo "✅ Configuración actualizada: [$2] $3 = $4"
        ;;
    "show")
        show_config "$2"
        ;;
    "validate")
        validate_config
        ;;
    "reset")
        reset_config
        ;;
    "apply")
        apply_config
        ;;
    *)
        echo "🔧 MateOS Configuration Manager"
        echo ""
        echo "Uso: mateos-config <comando> [argumentos]"
        echo ""
        echo "Comandos:"
        echo "  get <sección> <clave>     - Obtener valor de configuración"
        echo "  set <sección> <clave> <valor> - Establecer valor de configuración"
        echo "  show [sección]            - Mostrar configuración"
        echo "  validate                  - Validar configuración"
        echo "  reset                     - Resetear a valores por defecto"
        echo "  apply                     - Aplicar configuración"
        echo ""
        echo "Ejemplos:"
        echo "  mateos-config get hyprland gaps_in"
        echo "  mateos-config set hyprland gaps_in 10"
        echo "  mateos-config show hyprland"
        echo "  mateos-config validate"
        ;;
esac
