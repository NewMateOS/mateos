#!/bin/bash

# MateOS Configuration Manager
# Gestor de configuraci√≥n central de MateOS

MATEOS_PATH="${MATEOS_PATH:-$HOME/.local/share/mateOS}"
CONFIG_FILE="$MATEOS_PATH/config/mateos.conf"

# Funci√≥n para leer configuraci√≥n
get_config() {
    local section="$1"
    local key="$2"
    
    if [ -f "$CONFIG_FILE" ]; then
        # Buscar la secci√≥n y luego la clave
        awk -F'=' -v section="$section" -v key="$key" '
        BEGIN { in_section = 0 }
        /^\[/ { 
            if ($0 == "[" section "]") { in_section = 1; next }
            else { in_section = 0; next }
        }
        in_section && gsub(/^[ \t]+|[ \t]+$/, "", $1) && $1 == key { 
            gsub(/^[ \t]+|[ \t]+$/, "", $2)
            gsub(/^"|"$/, "", $2)
            print $2
            exit
        }
        ' "$CONFIG_FILE"
    fi
}

# Funci√≥n para escribir configuraci√≥n
set_config() {
    local section="$1"
    local key="$2"
    local value="$3"
    
    if [ ! -f "$CONFIG_FILE" ]; then
        echo "Error: Archivo de configuraci√≥n no encontrado: $CONFIG_FILE"
        exit 1
    fi
    
    # Crear backup
    cp "$CONFIG_FILE" "$CONFIG_FILE.bak.$(date +%s)"
    
    # Actualizar configuraci√≥n
    awk -F'=' -v section="$section" -v key="$key" -v value="$value" '
    BEGIN { in_section = 0; updated = 0 }
    /^\[/ { 
        if ($0 == "[" section "]") { in_section = 1; print; next }
        else { in_section = 0; print; next }
    }
    in_section && $1 == key { 
        print key " = \"" value "\""
        updated = 1
        next
    }
    { print }
    END {
        if (!updated && in_section) {
            print key " = \"" value "\""
        }
    }
    ' "$CONFIG_FILE" > "$CONFIG_FILE.tmp" && mv "$CONFIG_FILE.tmp" "$CONFIG_FILE"
}

# Funci√≥n para mostrar configuraci√≥n
show_config() {
    local section="$1"
    
    if [ -n "$section" ]; then
        echo "üîß Configuraci√≥n de MateOS - Secci√≥n: $section"
        echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
        awk -v section="$section" '
        BEGIN { in_section = 0 }
        /^\[/ { 
            if ($0 == "[" section "]") { in_section = 1; next }
            else { in_section = 0; next }
        }
        in_section && /^[^#]/ && /=/ { 
            gsub(/^[ \t]+|[ \t]+$/, "", $0)
            print "  " $0
        }
        ' "$CONFIG_FILE"
    else
        echo "üîß Configuraci√≥n de MateOS"
        echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
        cat "$CONFIG_FILE" | grep -E '^\[|^[a-zA-Z]' | while read line; do
            if [[ $line =~ ^\[.*\]$ ]]; then
                echo ""
                echo "üìÅ ${line//[\[\]]/}"
                echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
            else
                echo "  $line"
            fi
        done
    fi
}

# Funci√≥n para validar configuraci√≥n
validate_config() {
    echo "üîç Validando configuraci√≥n de MateOS..."
    echo ""
    
    local errors=0
    
    # Verificar archivo de configuraci√≥n
    if [ ! -f "$CONFIG_FILE" ]; then
        echo "‚ùå Archivo de configuraci√≥n no encontrado: $CONFIG_FILE"
        ((errors++))
    else
        echo "‚úÖ Archivo de configuraci√≥n encontrado"
    fi
    
    # Verificar secciones requeridas
    local required_sections=("system" "paths" "applications" "hyprland" "waybar")
    for section in "${required_sections[@]}"; do
        if grep -q "^\[$section\]" "$CONFIG_FILE"; then
            echo "‚úÖ Secci√≥n [$section] presente"
        else
            echo "‚ùå Secci√≥n [$section] faltante"
            ((errors++))
        fi
    done
    
    # Verificar rutas
    local mateos_path=$(get_config "paths" "mateos_path")
    if [ -z "$mateos_path" ]; then
        echo "‚ùå Ruta de MateOS no configurada"
        ((errors++))
    elif [ -d "${mateos_path//\$HOME/$HOME}" ]; then
        echo "‚úÖ Ruta de MateOS v√°lida: $mateos_path"
    else
        echo "‚ùå Ruta de MateOS inv√°lida: $mateos_path"
        ((errors++))
    fi
    
    if [ $errors -eq 0 ]; then
        echo ""
        echo "‚úÖ Configuraci√≥n v√°lida"
    else
        echo ""
        echo "‚ùå Se encontraron $errors errores en la configuraci√≥n"
    fi
    
    return $errors
}

# Funci√≥n para resetear configuraci√≥n
reset_config() {
    echo "üîÑ Reseteando configuraci√≥n a valores por defecto..."
    
    if [ -f "$CONFIG_FILE" ]; then
        cp "$CONFIG_FILE" "$CONFIG_FILE.backup.$(date +%s)"
        echo "üì¶ Backup creado"
    fi
    
    # Restaurar desde template
    if [ -f "$MATEOS_PATH/config/mateos.conf" ]; then
        cp "$MATEOS_PATH/config/mateos.conf" "$CONFIG_FILE"
        echo "‚úÖ Configuraci√≥n reseteada"
    else
        echo "‚ùå No se pudo encontrar template de configuraci√≥n"
        exit 1
    fi
}

# Funci√≥n para aplicar configuraci√≥n
apply_config() {
    echo "üîß Aplicando configuraci√≥n de MateOS..."
    echo ""
    
    # Aplicar variables de entorno
    local mateos_path=$(get_config "paths" "mateos_path")
    local config_path=$(get_config "paths" "config_path")
    local state_path=$(get_config "paths" "state_path")
    
    # Expandir variables
    mateos_path="${mateos_path//\$HOME/$HOME}"
    config_path="${config_path//\$HOME/$HOME}"
    state_path="${state_path//\$HOME/$HOME}"
    
    # Crear directorios necesarios
    mkdir -p "$config_path" "$state_path" "$state_path/logs"
    echo "‚úÖ Directorios creados"
    
    # Aplicar configuraci√≥n de Hyprland
    local gaps_in=$(get_config "hyprland" "gaps_in")
    local gaps_out=$(get_config "hyprland" "gaps_out")
    local rounding=$(get_config "hyprland" "rounding")
    
    if [ -n "$gaps_in" ] && [ -n "$gaps_out" ]; then
        echo "‚úÖ Configuraci√≥n de Hyprland aplicada"
    fi
    
    # Aplicar configuraci√≥n de Waybar
    local waybar_height=$(get_config "waybar" "height")
    local waybar_position=$(get_config "waybar" "position")
    
    if [ -n "$waybar_height" ]; then
        echo "‚úÖ Configuraci√≥n de Waybar aplicada"
    fi
    
    # Crear archivo de configuraci√≥n principal si no existe
    if [ ! -f "$config_path/mateos.conf" ]; then
        cp "$MATEOS_PATH/config/mateos.conf" "$config_path/mateos.conf" 2>/dev/null || {
            echo "‚ö†Ô∏è  No se pudo copiar mateos.conf, creando uno b√°sico"
            cat > "$config_path/mateos.conf" << EOF
[system]
version = "1.0.0"
debug = false
auto_update = true
backup_retention_days = 30

[paths]
mateos_path = "\$HOME/.local/share/mateOS"
config_path = "\$HOME/.config/mateOS"
state_path = "\$HOME/.local/state/mateOS"
backup_path = "\$HOME/.config/mateOS/backups"
log_path = "\$HOME/.local/state/mateOS/logs"

[applications]
default_terminal = "kitty"
default_browser = "firefox"
default_file_manager = "thunar"

[hyprland]
gaps_in = 5
gaps_out = 20
border_size = 2
rounding = 10

[waybar]
height = 30
position = "top"
EOF
        }
        echo "‚úÖ Archivo de configuraci√≥n principal creado"
    fi
    
    # Crear archivo de variables de entorno si no existe
    if [ ! -f "$config_path/mateos.env" ]; then
        cp "$MATEOS_PATH/config/mateos.env" "$config_path/mateos.env" 2>/dev/null || {
            echo "‚ö†Ô∏è  No se pudo copiar mateos.env, creando uno b√°sico"
            cat > "$config_path/mateos.env" << EOF
# MateOS Environment Variables
# Variables de entorno de MateOS

export MATEOS_PATH="\$HOME/.local/share/mateOS"
export MATEOS_CONFIG_PATH="\$HOME/.config/mateOS"
export MATEOS_STATE_PATH="\$HOME/.local/state/mateOS"
export MATEOS_BACKUP_PATH="\$HOME/.config/mateOS/backups"
export MATEOS_LOG_PATH="\$HOME/.local/state/mateOS/logs"

# A√±adir MateOS al PATH
export PATH="\$MATEOS_PATH/bin:\$PATH"
EOF
        }
        echo "‚úÖ Archivo de variables de entorno creado"
    fi
    
    echo ""
    echo "‚úÖ Configuraci√≥n aplicada exitosamente"
}

# Funci√≥n principal
case "$1" in
    "get")
        if [ -z "$2" ] || [ -z "$3" ]; then
            echo "Uso: mateos-config get <secci√≥n> <clave>"
            exit 1
        fi
        get_config "$2" "$3"
        ;;
    "set")
        if [ -z "$2" ] || [ -z "$3" ] || [ -z "$4" ]; then
            echo "Uso: mateos-config set <secci√≥n> <clave> <valor>"
            exit 1
        fi
        set_config "$2" "$3" "$4"
        echo "‚úÖ Configuraci√≥n actualizada: [$2] $3 = $4"
        ;;
    "show")
        show_config "$2"
        ;;
    "validate")
        validate_config
        ;;
    "reset")
        reset_config
        ;;
    "apply")
        apply_config
        ;;
    *)
        echo "üîß MateOS Configuration Manager"
        echo ""
        echo "Uso: mateos-config <comando> [argumentos]"
        echo ""
        echo "Comandos:"
        echo "  get <secci√≥n> <clave>     - Obtener valor de configuraci√≥n"
        echo "  set <secci√≥n> <clave> <valor> - Establecer valor de configuraci√≥n"
        echo "  show [secci√≥n]            - Mostrar configuraci√≥n"
        echo "  validate                  - Validar configuraci√≥n"
        echo "  reset                     - Resetear a valores por defecto"
        echo "  apply                     - Aplicar configuraci√≥n"
        echo ""
        echo "Ejemplos:"
        echo "  mateos-config get hyprland gaps_in"
        echo "  mateos-config set hyprland gaps_in 10"
        echo "  mateos-config show hyprland"
        echo "  mateos-config validate"
        ;;
esac
